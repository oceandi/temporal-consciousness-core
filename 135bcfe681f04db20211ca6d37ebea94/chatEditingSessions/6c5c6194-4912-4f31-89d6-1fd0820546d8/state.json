{"version":2,"sessionId":"6c5c6194-4912-4f31-89d6-1fd0820546d8","linearHistory":[{"requestId":"request_65dbd6ff-b231-4423-872d-5d3ea1d0eb70","stops":[{"entries":[{"resource":"file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","languageId":"python","originalHash":"18ecd3f","currentHash":"18ecd3f","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py?%7B%22sessionId%22%3A%226c5c6194-4912-4f31-89d6-1fd0820546d8%22%2C%22requestId%22%3A%22request_65dbd6ff-b231-4423-872d-5d3ea1d0eb70%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_65dbd6ff-b231-4423-872d-5d3ea1d0eb70"}}]}],"postEdit":[{"resource":"file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","languageId":"python","originalHash":"18ecd3f","currentHash":"824db59","originalToCurrentEdit":[{"pos":0,"len":11,"txt":"import json"},{"pos":13,"len":9,"txt":"import os"},{"pos":24,"len":39,"txt":"from datetime import datetime, timezone"},{"pos":65,"len":21,"txt":"import torch.nn as nn"},{"pos":88,"len":12,"txt":"import torch"},{"pos":102,"len":41,"txt":""},{"pos":145,"len":10,"txt":"# --- MODEL TANIMI ---"},{"pos":157,"len":0,"txt":"class MyModel(nn.Module):"},{"pos":159,"len":32,"txt":"    def __init__(self):"},{"pos":193,"len":53,"txt":"        super().__init__()"},{"pos":248,"len":24,"txt":"        self.linear = nn.Linear(10, 1)"},{"pos":274,"len":41,"txt":"    def forward(self, x):"},{"pos":317,"len":40,"txt":"        return self.linear(x)"},{"pos":361,"len":32,"txt":"# --- BELLEK ve ÇEKİRDEK SINIFLARI ---"},{"pos":395,"len":18,"txt":"class EpisodicMemoryPersistence:"},{"pos":415,"len":64,"txt":"    def __init__(self, path=\"episodic_memory.jsonl\"):"},{"pos":481,"len":26,"txt":"        self.path = path"},{"pos":509,"len":9,"txt":"        if not os.path.exists(self.path):"},{"pos":520,"len":57,"txt":"            open(self.path, \"w\").close()"},{"pos":579,"len":46,"txt":"    def save_event(self, event):"},{"pos":627,"len":0,"txt":"        record = {"},{"pos":629,"len":38,"txt":"            \"timestamp\": datetime.now(timezone.utc).isoformat(),"},{"pos":669,"len":19,"txt":"            \"event\": event"},{"pos":690,"len":57,"txt":"        }"},{"pos":749,"len":26,"txt":"        with open(self.path, \"a\", encoding=\"utf-8\") as f:"},{"pos":777,"len":47,"txt":"            f.write(json.dumps(record) + \"\\n\")"},{"pos":826,"len":17,"txt":"    def load_events(self, limit=None):"},{"pos":845,"len":34,"txt":"        events = []"},{"pos":881,"len":21,"txt":"        with open(self.path, \"r\", encoding=\"utf-8\") as f:"},{"pos":904,"len":0,"txt":"            for line in f:"},{"pos":906,"len":29,"txt":"                events.append(json.loads(line))"},{"pos":937,"len":23,"txt":"        if limit:"},{"pos":962,"len":24,"txt":"            return events[-limit:]"},{"pos":988,"len":0,"txt":"        return events"},{"pos":990,"len":21,"txt":""},{"pos":1013,"len":36,"txt":"class HierarchicalMemoryBank:"},{"pos":1051,"len":53,"txt":"    def __init__(self):"},{"pos":1106,"len":0,"txt":"        self.memory = []"},{"pos":1108,"len":27,"txt":"    def recall(self):"},{"pos":1137,"len":97,"txt":"        return [m[\"event\"] for m in self.memory[-3:]]"},{"pos":1236,"len":0,"txt":"    def store(self, event):"},{"pos":1238,"len":25,"txt":"        self.memory.append({\"event\": event, \"timestamp\": datetime.now(timezone.utc).isoformat()})"},{"pos":1265,"len":23,"txt":""},{"pos":1290,"len":27,"txt":"class GraphNeuralNetwork:"},{"pos":1319,"len":0,"txt":"    def __init__(self):"},{"pos":1321,"len":28,"txt":"        self.knowledge = {}"},{"pos":1351,"len":57,"txt":"    def update(self, event):"},{"pos":1410,"len":34,"txt":"        for word in event.split():"},{"pos":1446,"len":66,"txt":"            self.knowledge[word] = self.knowledge.get(word, 0) + 1"},{"pos":1516,"len":24,"txt":"class AttentionalBuffer:"},{"pos":1542,"len":23,"txt":"    def __init__(self):"},{"pos":1567,"len":24,"txt":"        self.buffer = []"},{"pos":1593,"len":0,"txt":"    def focus(self, event):"},{"pos":1595,"len":27,"txt":"        self.buffer.append(event)"},{"pos":1624,"len":33,"txt":"        if len(self.buffer) > 5:"},{"pos":1659,"len":32,"txt":"            self.buffer.pop(0)"},{"pos":1693,"len":30,"txt":""},{"pos":1725,"len":0,"txt":"class CausalTransformer:"},{"pos":1727,"len":24,"txt":"    def __init__(self, **kwargs):"},{"pos":1753,"len":33,"txt":"        self.kwargs = kwargs"},{"pos":1788,"len":28,"txt":"    def bind(self, events):"},{"pos":1818,"len":0,"txt":"        return \" | \".join(events)"},{"pos":1820,"len":27,"txt":""},{"pos":1849,"len":51,"txt":"def attention(query, memory_bank, weights):"},{"pos":1902,"len":33,"txt":"    return memory_bank"},{"pos":1939,"len":43,"txt":"def calculate_integrated_information(network_state):"},{"pos":1984,"len":38,"txt":"    return float(len(network_state))"},{"pos":2024,"len":22,"txt":""},{"pos":2048,"len":0,"txt":"consolidation_interval = 60"},{"pos":2050,"len":52,"txt":"consciousness_threshold = 0.5"},{"pos":2104,"len":38,"txt":""},{"pos":2144,"len":36,"txt":"class TemporalNeuralCore:"},{"pos":2182,"len":0,"txt":"    def __init__(self):"},{"pos":2184,"len":27,"txt":"        self.episodic_memory = HierarchicalMemoryBank()"},{"pos":2213,"len":29,"txt":"        self.episodic_persistence = EpisodicMemoryPersistence()"},{"pos":2244,"len":0,"txt":"        self.semantic_memory = GraphNeuralNetwork()"},{"pos":2246,"len":25,"txt":"        self.working_memory = AttentionalBuffer()"},{"pos":2273,"len":23,"txt":"        self.temporal_binder = CausalTransformer("},{"pos":2298,"len":55,"txt":"            bidirectional=False,"},{"pos":2355,"len":63,"txt":"            memory_bank_size=10**12,"},{"pos":2420,"len":51,"txt":"            consolidation_mechanism=True"},{"pos":2473,"len":49,"txt":"        )"},{"pos":2524,"len":49,"txt":"        self.model = MyModel()"},{"pos":2575,"len":32,"txt":"        # Model dosyası varsa yükle"},{"pos":2609,"len":36,"txt":"        if os.path.exists(\"model.pth\"):"},{"pos":2647,"len":40,"txt":"            self.model.load_state_dict(torch.load(\"model.pth\"))"},{"pos":2689,"len":9,"txt":"            self.model.eval()"},{"pos":2700,"len":30,"txt":""},{"pos":2732,"len":22,"txt":"    def global_workspace(self, events):"},{"pos":2756,"len":59,"txt":"        return self.temporal_binder.bind(events)"},{"pos":2817,"len":25,"txt":""},{"pos":2844,"len":0,"txt":"    def consolidate_experience(self, conscious_broadcast):"},{"pos":2846,"len":39,"txt":"        self.episodic_memory.store(conscious_broadcast)"},{"pos":2887,"len":46,"txt":"        self.semantic_memory.update(conscious_broadcast)"},{"pos":2935,"len":48,"txt":"        self.working_memory.focus(conscious_broadcast)"},{"pos":2987,"len":58,"txt":"    def generate_with_continuity(self, conscious_broadcast):"},{"pos":3047,"len":34,"txt":"        return f\"Conscious Output: {conscious_broadcast}\""},{"pos":3083,"len":55,"txt":""},{"pos":3140,"len":56,"txt":"    def conscious_step(self, input_stream):"},{"pos":3198,"len":54,"txt":"        conscious_broadcast = self.global_workspace("},{"pos":3254,"len":0,"txt":"            [input_stream] + self.episodic_memory.recall()"},{"pos":3256,"len":60,"txt":"        )"},{"pos":3318,"len":37,"txt":"        self.consolidate_experience(conscious_broadcast)"},{"pos":3357,"len":57,"txt":"        self.episodic_persistence.save_event(input_stream)"},{"pos":3416,"len":0,"txt":"        return self.generate_with_continuity(conscious_broadcast)"},{"pos":3418,"len":43,"txt":""},{"pos":3463,"len":52,"txt":"def phi_consciousness_measure(network_state):"},{"pos":3517,"len":58,"txt":"    phi = calculate_integrated_information(network_state)"},{"pos":3577,"len":9,"txt":"    return phi > consciousness_threshold"},{"pos":3588,"len":56,"txt":""},{"pos":3646,"len":58,"txt":"# --- DEMO AKIŞI ---"},{"pos":3706,"len":65,"txt":"def run_demo():"},{"pos":3773,"len":0,"txt":"    core = TemporalNeuralCore()"},{"pos":3775,"len":45,"txt":"    conversation = ["},{"pos":3822,"len":57,"txt":"        \"Merhaba, nasılsın?\","},{"pos":3881,"len":40,"txt":"        \"Bugün hava çok güzel.\","},{"pos":3923,"len":0,"txt":"        \"Yapay zeka hakkında ne düşünüyorsun?\","},{"pos":3925,"len":54,"txt":"        \"Ben öğrenmeye devam ediyorum.\","},{"pos":3981,"len":26,"txt":"        \"Görüşmek üzere!\""},{"pos":4009,"len":31,"txt":"    ]"},{"pos":4042,"len":42,"txt":"    for msg in conversation:"},{"pos":4086,"len":20,"txt":"        output = core.conscious_step(msg)"},{"pos":4108,"len":29,"txt":"        print(output)"},{"pos":4139,"len":32,"txt":"    print(\"\\nSon 3 episodic memory kaydı:\")"},{"pos":4173,"len":47,"txt":"    for event in core.episodic_persistence.load_events(limit=3):"},{"pos":4222,"len":40,"txt":"        print(event)"},{"pos":4264,"len":25,"txt":""},{"pos":4291,"len":5,"txt":"# --- FLASK API ---"},{"pos":4298,"len":28,"txt":"def run_api():"},{"pos":4328,"len":41,"txt":"    from flask import Flask, request, jsonify"},{"pos":4371,"len":21,"txt":"    app = Flask(__name__)"},{"pos":4394,"len":0,"txt":"    model = MyModel()"},{"pos":4396,"len":43,"txt":"    if os.path.exists(\"model.pth\"):"},{"pos":4441,"len":43,"txt":"        model.load_state_dict(torch.load(\"model.pth\"))"},{"pos":4486,"len":64,"txt":"        model.eval()"},{"pos":4552,"len":20,"txt":"    @app.route(\"/predict\", methods=[\"POST\"])"},{"pos":4574,"len":0,"txt":"    def predict():"},{"pos":4576,"len":25,"txt":"        data = request.json[\"input\"]"},{"pos":4603,"len":23,"txt":"        tensor = torch.tensor(data).float()"},{"pos":4628,"len":26,"txt":"        with torch.no_grad():"},{"pos":4656,"len":38,"txt":"            output = model(tensor).tolist()"},{"pos":4696,"len":25,"txt":"        return jsonify({\"output\": output})"},{"pos":4723,"len":29,"txt":"    app.run(port=5000)"},{"pos":4756,"len":21,"txt":"# --- OPENCV DEMO ---"},{"pos":4779,"len":31,"txt":"def run_opencv_demo():"},{"pos":4812,"len":12,"txt":"    import cv2"},{"pos":4826,"len":0,"txt":"    cap = cv2.VideoCapture(0)"},{"pos":4828,"len":40,"txt":"    while True:"},{"pos":4870,"len":14,"txt":"        ret, frame = cap.read()"},{"pos":4886,"len":32,"txt":"        cv2.imshow(\"Kamera\", frame)"},{"pos":4920,"len":39,"txt":"        if cv2.waitKey(1) & 0xFF == ord('q'):"},{"pos":4961,"len":25,"txt":"            break"},{"pos":4988,"len":39,"txt":"    cap.release()"},{"pos":5029,"len":38,"txt":"    cv2.destroyAllWindows()"},{"pos":5071,"len":26,"txt":"# --- ANA SEÇİCİ ---"},{"pos":5099,"len":22,"txt":"if __name__ == \"__main__\":"},{"pos":5123,"len":0,"txt":"    import sys"},{"pos":5125,"len":25,"txt":"    if len(sys.argv) > 1:"},{"pos":5152,"len":11,"txt":"        if sys.argv[1] == \"api\":"},{"pos":5165,"len":27,"txt":"            run_api()"},{"pos":5194,"len":30,"txt":"        elif sys.argv[1] == \"opencv\":"},{"pos":5226,"len":31,"txt":"            run_opencv_demo()"},{"pos":5259,"len":41,"txt":"        else:"},{"pos":5302,"len":13,"txt":"            run_demo()"},{"pos":5317,"len":13,"txt":"    else:"},{"pos":5332,"len":23,"txt":"        run_demo()"}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py?%7B%22sessionId%22%3A%226c5c6194-4912-4f31-89d6-1fd0820546d8%22%2C%22requestId%22%3A%22request_65dbd6ff-b231-4423-872d-5d3ea1d0eb70%22%2C%22undoStop%22%3A%22d19944f6-f46c-4e17-911b-79a8e843c7c0%22%7D","telemetryInfo":{"requestId":"request_65dbd6ff-b231-4423-872d-5d3ea1d0eb70"}}]}],"linearHistoryIndex":1,"initialFileContents":[["file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","18ecd3f"]],"recentSnapshot":{"entries":[{"resource":"file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","languageId":"python","originalHash":"18ecd3f","currentHash":"824db59","originalToCurrentEdit":[{"pos":102,"len":55,"txt":"\r\n# --- MODEL TANIMI ---\r\nclass MyModel(nn.Module):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self.linear = nn.Linear(10, 1)\r\n    def forward(self, x):\r\n        return self.linear(x)\r\n\r\n# --- BELLEK ve ÇEKİRDEK SINIFLARI ---"},{"pos":359,"len":2,"txt":""},{"pos":627,"len":2,"txt":""},{"pos":988,"len":2,"txt":""},{"pos":1013,"len":38,"txt":""},{"pos":1106,"len":2,"txt":""},{"pos":1319,"len":2,"txt":""},{"pos":1351,"len":59,"txt":""},{"pos":1593,"len":2,"txt":""},{"pos":1818,"len":2,"txt":""},{"pos":1849,"len":53,"txt":""},{"pos":1984,"len":40,"txt":""},{"pos":2104,"len":40,"txt":""},{"pos":2747,"len":1,"txt":" dosyası varsa"},{"pos":2756,"len":0,"txt":"        if os.path.exists(\"model.pth\"):\r\n"},{"pos":2756,"len":0,"txt":"    "},{"pos":2817,"len":0,"txt":"    "},{"pos":2887,"len":48,"txt":""},{"pos":3047,"len":36,"txt":""},{"pos":3318,"len":39,"txt":""},{"pos":3925,"len":84,"txt":"# --- DEMO AKIŞI ---\r\ndef run_demo():\r\n"},{"pos":4042,"len":44,"txt":""},{"pos":4394,"len":47,"txt":""},{"pos":4576,"len":31,"txt":"# --- FLASK API ---\r\n"},{"pos":4611,"len":13,"txt":"run_api("},{"pos":4628,"len":126,"txt":"    from flask import Flask, request, jsonify"},{"pos":4756,"len":0,"txt":"    "},{"pos":4779,"len":0,"txt":"    "},{"pos":4787,"len":0,"txt":"MyModel()\r\n    if os.path.exists(\"model.pth\"):\r\n        model.load_state_dict("},{"pos":4810,"len":0,"txt":")"},{"pos":4812,"len":0,"txt":"        "},{"pos":4826,"len":2,"txt":""},{"pos":4828,"len":0,"txt":"    "},{"pos":4870,"len":0,"txt":"    "},{"pos":4886,"len":0,"txt":"    "},{"pos":4920,"len":0,"txt":"    "},{"pos":4961,"len":0,"txt":"    "},{"pos":4988,"len":0,"txt":"    "},{"pos":5029,"len":0,"txt":"    "},{"pos":5069,"len":30,"txt":""},{"pos":5125,"len":0,"txt":"# --- OPENCV DEMO ---\r\ndef run_opencv_demo():\r\n    import cv2\r\n"},{"pos":5125,"len":0,"txt":"    "},{"pos":5152,"len":0,"txt":"    "},{"pos":5165,"len":0,"txt":"    "},{"pos":5194,"len":32,"txt":""},{"pos":5226,"len":0,"txt":"    "},{"pos":5259,"len":0,"txt":"    "},{"pos":5302,"len":0,"txt":"    "},{"pos":5317,"len":0,"txt":"    "},{"pos":5332,"len":0,"txt":"    "},{"pos":5355,"len":0,"txt":"\r\n\r\n# --- ANA SEÇİCİ ---\r\nif __name__ == \"__main__\":\r\n    import sys\r\n    if len(sys.argv) > 1:\r\n        if sys.argv[1] == \"api\":\r\n            run_api()\r\n        elif sys.argv[1] == \"opencv\":\r\n            run_opencv_demo()\r\n        else:\r\n            run_demo()\r\n    else:\r\n        run_demo()"}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py?%7B%22sessionId%22%3A%226c5c6194-4912-4f31-89d6-1fd0820546d8%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_65dbd6ff-b231-4423-872d-5d3ea1d0eb70"}}]}}