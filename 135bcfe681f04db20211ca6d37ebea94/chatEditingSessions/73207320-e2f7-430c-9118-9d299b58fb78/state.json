{"version":2,"sessionId":"73207320-e2f7-430c-9118-9d299b58fb78","linearHistory":[{"requestId":"request_941d1e8a-a544-41bb-8430-a4bd8016406e","stops":[{"entries":[{"resource":"file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","languageId":"python","originalHash":"554cdad","currentHash":"554cdad","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py?%7B%22sessionId%22%3A%2273207320-e2f7-430c-9118-9d299b58fb78%22%2C%22requestId%22%3A%22request_941d1e8a-a544-41bb-8430-a4bd8016406e%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_941d1e8a-a544-41bb-8430-a4bd8016406e"}}]}],"postEdit":[{"resource":"file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","languageId":"python","originalHash":"554cdad","currentHash":"99d1368","originalToCurrentEdit":[{"pos":0,"len":11,"txt":"import json"},{"pos":13,"len":9,"txt":"import os"},{"pos":24,"len":29,"txt":"from datetime import datetime"},{"pos":55,"len":21,"txt":"import torch.nn as nn"},{"pos":80,"len":32,"txt":"class EpisodicMemoryPersistence:"},{"pos":114,"len":53,"txt":"    def __init__(self, path=\"episodic_memory.jsonl\"):"},{"pos":169,"len":24,"txt":"        self.path = path"},{"pos":195,"len":29,"txt":"        if not os.path.exists(self.path):"},{"pos":226,"len":41,"txt":"            open(self.path, \"w\").close()"},{"pos":269,"len":40,"txt":""},{"pos":311,"len":0,"txt":"    def save_event(self, event):"},{"pos":313,"len":32,"txt":"        record = {"},{"pos":347,"len":18,"txt":"            \"timestamp\": datetime.utcnow().isoformat(),"},{"pos":367,"len":55,"txt":"            \"event\": event"},{"pos":424,"len":26,"txt":"        }"},{"pos":452,"len":9,"txt":"        with open(self.path, \"a\", encoding=\"utf-8\") as f:"},{"pos":463,"len":57,"txt":"            f.write(json.dumps(record) + \"\\n\")"},{"pos":522,"len":46,"txt":""},{"pos":570,"len":0,"txt":"    def load_events(self, limit=None):"},{"pos":572,"len":38,"txt":"        events = []"},{"pos":612,"len":19,"txt":"        with open(self.path, \"r\", encoding=\"utf-8\") as f:"},{"pos":633,"len":57,"txt":"            for line in f:"},{"pos":692,"len":26,"txt":"                events.append(json.loads(line))"},{"pos":720,"len":47,"txt":"        if limit:"},{"pos":769,"len":17,"txt":"            return events[-limit:]"},{"pos":788,"len":34,"txt":"        return events"},{"pos":824,"len":21,"txt":""},{"pos":847,"len":0,"txt":"class HierarchicalMemoryBank:"},{"pos":849,"len":25,"txt":"    def __init__(self):"},{"pos":876,"len":23,"txt":"        self.memory = []"},{"pos":901,"len":33,"txt":""},{"pos":936,"len":55,"txt":"    def recall(self):"},{"pos":993,"len":79,"txt":"        # Son 3 olayı döndür (örnek)"},{"pos":1074,"len":52,"txt":"        return [m[\"event\"] for m in self.memory[-3:]]"},{"pos":1128,"len":49,"txt":""},{"pos":1179,"len":8,"txt":"    def store(self, event):"},{"pos":1189,"len":36,"txt":"        self.memory.append({\"event\": event, \"timestamp\": datetime.utcnow().isoformat()})"},{"pos":1227,"len":49,"txt":""},{"pos":1278,"len":55,"txt":"class GraphNeuralNetwork:"},{"pos":1335,"len":55,"txt":"    def __init__(self):"},{"pos":1392,"len":61,"txt":"        self.knowledge = {}"},{"pos":1455,"len":9,"txt":""},{"pos":1466,"len":4,"txt":"    def update(self, event):"},{"pos":1472,"len":43,"txt":"        # Basit anahtar kelime tabanlı güncelleme (örnek)"},{"pos":1517,"len":48,"txt":"        for word in event.split():"},{"pos":1567,"len":52,"txt":"            self.knowledge[word] = self.knowledge.get(word, 0) + 1"},{"pos":1621,"len":56,"txt":""},{"pos":1679,"len":9,"txt":"class AttentionalBuffer:"},{"pos":1690,"len":8,"txt":"    def __init__(self):"},{"pos":1700,"len":35,"txt":"        self.buffer = []"},{"pos":1737,"len":56,"txt":""},{"pos":1795,"len":84,"txt":"    def focus(self, event):"},{"pos":1881,"len":65,"txt":"        self.buffer.append(event)"},{"pos":1948,"len":0,"txt":"        if len(self.buffer) > 5:"},{"pos":1950,"len":0,"txt":"            self.buffer.pop(0)"},{"pos":1952,"len":39,"txt":""},{"pos":1993,"len":42,"txt":"class CausalTransformer:"},{"pos":2037,"len":33,"txt":"    def __init__(self, **kwargs):"},{"pos":2072,"len":70,"txt":"        self.kwargs = kwargs"},{"pos":2144,"len":46,"txt":""},{"pos":2192,"len":76,"txt":"    def bind(self, events):"},{"pos":2270,"len":0,"txt":"        # Sadece olayları sırayla birleştir (örnek)"},{"pos":2272,"len":0,"txt":"        return \" | \".join(events)"},{"pos":2274,"len":38,"txt":""},{"pos":2314,"len":15,"txt":"def attention(query, memory_bank, weights):"},{"pos":2331,"len":35,"txt":"    # Basit örnek: tüm olayları döndür"},{"pos":2368,"len":58,"txt":"    return memory_bank"},{"pos":2428,"len":8,"txt":""},{"pos":2438,"len":32,"txt":"def calculate_integrated_information(network_state):"},{"pos":2472,"len":58,"txt":"    # Basit örnek: ağdaki düğüm sayısı"},{"pos":2532,"len":8,"txt":"    return float(len(network_state))"},{"pos":2542,"len":30,"txt":""},{"pos":2574,"len":45,"txt":"consolidation_interval = 60"},{"pos":2621,"len":8,"txt":"consciousness_threshold = 0.5"},{"pos":2631,"len":51,"txt":""},{"pos":2684,"len":0,"txt":"class TemporalNeuralCore:"},{"pos":2686,"len":0,"txt":"    def __init__(self):"},{"pos":2688,"len":45,"txt":"        self.episodic_memory = HierarchicalMemoryBank()"},{"pos":2735,"len":37,"txt":"        self.episodic_persistence = EpisodicMemoryPersistence()"},{"pos":2774,"len":57,"txt":"        self.semantic_memory = GraphNeuralNetwork()"},{"pos":2833,"len":4,"txt":"        self.working_memory = AttentionalBuffer()"},{"pos":2839,"len":29,"txt":"        self.temporal_binder = CausalTransformer("},{"pos":2870,"len":40,"txt":"            bidirectional=False,"},{"pos":2912,"len":0,"txt":"            memory_bank_size=10**12,"},{"pos":2914,"len":29,"txt":"            consolidation_mechanism=True"},{"pos":2945,"len":21,"txt":"        )"},{"pos":2968,"len":17,"txt":""},{"pos":2987,"len":0,"txt":"    def global_workspace(self, events):"},{"pos":2989,"len":25,"txt":"        # Tüm olayları birleştirip yay (örnek)"},{"pos":3016,"len":8,"txt":"        return self.temporal_binder.bind(events)"},{"pos":3028,"len":24,"txt":"    def consolidate_experience(self, conscious_broadcast):"},{"pos":3054,"len":8,"txt":"        # Bellek ve bilgi güncelle"},{"pos":3064,"len":0,"txt":"        self.episodic_memory.store(conscious_broadcast)"},{"pos":3066,"len":24,"txt":"        self.semantic_memory.update(conscious_broadcast)"},{"pos":3092,"len":33,"txt":"        self.working_memory.focus(conscious_broadcast)"},{"pos":3127,"len":12,"txt":""},{"pos":3141,"len":0,"txt":"    def generate_with_continuity(self, conscious_broadcast):"},{"pos":3143,"len":43,"txt":"        # Basit çıktı üretimi (örnek)"},{"pos":3188,"len":15,"txt":"        return f\"Conscious Output: {conscious_broadcast}\""},{"pos":3207,"len":52,"txt":"    def conscious_step(self, input_stream):"},{"pos":3261,"len":14,"txt":"        conscious_broadcast = self.global_workspace("},{"pos":3277,"len":0,"txt":"            [input_stream] + self.episodic_memory.recall()"},{"pos":3279,"len":27,"txt":"        )"},{"pos":3308,"len":29,"txt":"        self.consolidate_experience(conscious_broadcast)\r\n        self.episodic_persistence.save_event(input_stream)\r\n        return self.generate_with_continuity(conscious_broadcast)\r\n\r\ndef phi_consciousness_measure(network_state):\r\n    phi = calculate_integrated_information(network_state)\r\n    return phi > consciousness_threshold\r\n\r\n# Demo: Sistemi çalıştırmak için örnek main fonksiyonu\r\nif __name__ == \"__main__\":\r\n    core = TemporalNeuralCore()\r\n    # Gerçek veri örneği: kısa bir diyalog\r\n    conversation = [\r\n        \"Merhaba, nasılsın?\",\r\n        \"Bugün hava çok güzel.\",\r\n        \"Yapay zeka hakkında ne düşünüyorsun?\",\r\n        \"Ben öğrenmeye devam ediyorum.\",\r\n        \"Görüşmek üzere!\"\r\n    ]\r\n    for msg in conversation:\r\n        output = core.conscious_step(msg)\r\n        print(output)\r\n\r\n    # Bellek dosyasından son 3 olayı göster\r\n    print(\"\\nSon 3 episodic memory kaydı:\")\r\n    for event in core.episodic_persistence.load_events(limit=3):\r\n        print(event)"}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py?%7B%22sessionId%22%3A%2273207320-e2f7-430c-9118-9d299b58fb78%22%2C%22requestId%22%3A%22request_941d1e8a-a544-41bb-8430-a4bd8016406e%22%2C%22undoStop%22%3A%22d19944f6-f46c-4e17-911b-79a8e843c7c0%22%7D","telemetryInfo":{"requestId":"request_941d1e8a-a544-41bb-8430-a4bd8016406e"}}]}],"linearHistoryIndex":1,"initialFileContents":[["file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","554cdad"]],"recentSnapshot":{"entries":[{"resource":"file:///c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py","languageId":"python","originalHash":"554cdad","currentHash":"99d1368","originalToCurrentEdit":[{"pos":195,"len":31,"txt":""},{"pos":849,"len":0,"txt":"class HierarchicalMemoryBank:\r\n    def __init__(self):\r\n        self.memory = []\r\n\r\n    def recall(self):\r\n        # Son 3 olayı döndür (örnek)\r\n        return [m[\"event\"] for m in self.memory[-3:]]\r\n\r\n    def store(self, event):\r\n        self.memory.append({\"event\": event, \"timestamp\": datetime.utcnow().isoformat()})\r\n\r\nclass GraphNeuralNetwork:\r\n    def __init__(self):\r\n        self.knowledge = {}\r\n\r\n    def update(self, event):\r\n        # Basit anahtar kelime tabanlı güncelleme (örnek)\r\n        for word in event.split():\r\n            self.knowledge[word] = self.knowledge.get(word, 0) + 1\r\n\r\nclass AttentionalBuffer:\r\n    def __init__(self):\r\n        self.buffer = []\r\n\r\n    def focus(self, event):\r\n        self.buffer.append(event)\r\n        if len(self.buffer) > 5:\r\n            self.buffer.pop(0)\r\n\r\nclass CausalTransformer:\r\n    def __init__(self, **kwargs):\r\n        self.kwargs = kwargs\r\n\r\n    def bind(self, events):\r\n        # Sadece olayları sırayla birleştir (örnek)\r\n        return \" | \".join(events)\r\n\r\ndef attention(query, memory_bank, weights):\r\n    # Basit örnek: tüm olayları döndür\r\n    return memory_bank\r\n\r\ndef calculate_integrated_information(network_state):\r\n    # Basit örnek: ağdaki düğüm sayısı\r\n    return float(len(network_state))\r\n\r\nconsolidation_interval = 60\r\nconsciousness_threshold = 0.5\r\n\r\n"},{"pos":901,"len":35,"txt":""},{"pos":1056,"len":16,"txt":""},{"pos":1125,"len":1,"txt":""},{"pos":1179,"len":48,"txt":""},{"pos":1310,"len":23,"txt":""},{"pos":1371,"len":101,"txt":"\r\n            consolidation_mechanism=True\r\n        )\r\n\r\n    def global_workspace(self, events):\r\n        # Tüm olayları birleştirip yay (örnek)\r\n        return self.temporal_binder.bind(events)\r\n\r\n    def consolidate_experience(self, conscious_broadcast):\r\n        # Bellek ve bilgi güncelle\r\n        self.episodic_memory.store(conscious_broadcast)\r\n        self.semantic_memory.update(conscious_broadcast)\r\n        self.working_memory.focus(conscious_broadcast)\r\n\r\n    def generate_with_continuity(self, conscious_broadcast):\r\n        # Basit çıktı üretimi (örnek)\r\n        return f\"Conscious Output: {conscious_broadcast}\"\r\n\r\n"},{"pos":1517,"len":50,"txt":""},{"pos":1633,"len":0,"txt":"["},{"pos":1645,"len":0,"txt":"]"},{"pos":1690,"len":47,"txt":""},{"pos":1853,"len":26,"txt":""},{"pos":1950,"len":738,"txt":""},{"pos":2735,"len":39,"txt":""},{"pos":2833,"len":37,"txt":""},{"pos":2914,"len":423,"txt":"# Demo: Sistemi çalıştırmak için örnek main fonksiyonu\r\nif __name__ == \"__main__\":\r\n    core = TemporalNeuralCore()\r\n    # Gerçek veri örneği: kısa bir diyalog\r\n    conversation = [\r\n        \"Merhaba, nasılsın?\",\r\n        \"Bugün hava çok güzel.\",\r\n        \"Yapay zeka hakkında ne düşünüyorsun?\",\r\n        \"Ben öğrenmeye devam ediyorum.\",\r\n        \"Görüşmek üzere!\"\r\n    ]\r\n    for msg in conversation:\r\n        output = core.conscious_step(msg)\r\n        print(output)\r\n\r\n    # Bellek dosyasından son 3 olayı göster\r\n    print(\"\\nSon 3 episodic memory kaydı:\")\r\n    for event in core.episodic_persistence.load_events(limit=3):\r\n        print(event)"}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/c%3A/Users/EXT03426951/Documents/GitHub/temporal-consciousness-core/app.py?%7B%22sessionId%22%3A%2273207320-e2f7-430c-9118-9d299b58fb78%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_941d1e8a-a544-41bb-8430-a4bd8016406e"}}]}}